Approach -1 // recurssion

class Solution {

    public int solve(int[] nums,  int i, int n){

        if(i>=n){
            return 0;
        }

        int pick = nums[i] + solve(nums, i+2, n);
        int nonPick = solve(nums, i+1, n);

        return Math.max(pick, nonPick);
    }
    public int rob(int[] nums) {

        int n = nums.length;

        return solve(nums, 0, n);
    }
}

Approach -2 // recurssion + Memo 

class Solution {
    int[] dp ;

    public int solve(int[] nums,  int i, int n){

        if(i>=n){
            return 0;
        }
        if(dp[i] != -1){
            return dp[i];
        }

        int pick = nums[i] + solve(nums, i+2, n);
        int nonPick = solve(nums, i+1, n);

        return dp[i] = Math.max(pick, nonPick);
    }
    public int rob(int[] nums) {

        int n = nums.length;
        dp = new int[n+1];
        Arrays.fill(dp, -1);
        return solve(nums, 0, n);
    }
}

Approach -3 // bottom-up 

class Solution {

    public int rob(int[] nums) {

        int n = nums.length;
        int[] t = new int[n+1];
        //t[]
        
        t[0] = 0;
        t[1] = nums[0];

        for(int i=2; i<=n; i++){
            int steal = nums[i-1] + t[i-2];
            int skip = t[i-1];

            t[i] = Math.max(steal, skip);
    
        }
    return t[n];
    }
}
// Approach -4 space optimization 

class Solution {

    public int rob(int[] nums) {
    int n = nums.length;
        
        int prevPrev = 0;
        int prev     = nums[0];
        
        for(int i = 2; i<=n; i++) {
            int skip = prev;
            
            int take = nums[i-1] + prevPrev;
                
            int temp = Math.max(skip, take);
            
            prevPrev = prev;
            prev     = temp;
        }
        
        return prev;
    }
}
