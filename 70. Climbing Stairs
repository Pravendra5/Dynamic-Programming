//  Approach -3 using temp variable

class Solution {
    
    public int climbStairs(int n) {

        if(n==1 || n==2 ) return n;

       int a = 1;
       int b = 2;
       int c = 3;
        
        for(int i=3; i<=n; i++){
            c = a + b;

            int temp_b = b;
            b = c;
            a = temp_b;

        }
       return c;
    }
}


//  Approach -3 bottom approach

class Solution {
    
    public int climbStairs(int n) {

        if(n==1 || n==2 || n==3) return n;

        int arr[] = new int[n+1];

        arr[0] = 0;
        arr[1] = 1;
        arr[2] = 2;
        
        for(int i=3; i<=n; i++){
            arr[i] = arr[i-1] + arr[i-2];
        }
       return arr[n];
    }
}


// Approach -2 memoization top down aprroach

class Solution {
     static int dp[];

    int solve(int n){

        if(n<0) return 0;

        if(dp[n] != -1){
            return dp[n];
        }

        if(n==0) return 1;

      int one = solve(n-1);
      int two = solve(n-2);

      return dp[n] = one + two;
    }

    public int climbStairs(int n) {

        dp = new int[46];
        Arrays.fill(dp, -1);

      return solve(n);
       
    }
}

// Approach - 1 Recurssion

class Solution {
    public int climbStairs(int n) {
        
        if(n<0) return 0;

        if(n==0) return 1;

      int one = climbStairs(n-1);
      int two = climbStairs(n-2);

      return one+two;
    }
}
