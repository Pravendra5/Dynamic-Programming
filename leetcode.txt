//  Approach - 1 

class Solution {

    public int fib(int n) {
        
       if(n <= 1) return n;
       int a = 0;
       int b = 1;
       int c = 0;

       for(int i=1; i<n; i++){

            c = a+b;
            a = b;
            b = c;
       }
    return c;
    }
}

//  Approach - 2

class Solution {

    public int fib(int n) {
        
       if(n <= 1) return n;
       
       return fib(n-1) + fib(n-2);
      
    }
} 

//  Approach - 3

class Solution {
    int solve(int n, int dp[]){
        if(n <= 1) return n;

          if(dp[n] != -1)
            return dp[n];
        
        return dp[n] = fib(n-1) + fib(n-2);
    }
    public int fib(int n) {
        
        if(n <= 1) return n;

        int dp[]  = new int[n+1];
        Arrays.fill(dp, -1);

        return solve(n, dp);
    }
}

// Approach - 4

class Solution {

    public int fib(int n) {
        
       if(n <= 1) return n;
       
       int[] dp = new int[n+1];
       
       dp[0] = 0;
       dp[1] = 1;

       for(int i=2; i<=n; i++){
        dp[i] = dp[i-1] + dp[i-2];
       }

       return dp[n];
      
    }
}